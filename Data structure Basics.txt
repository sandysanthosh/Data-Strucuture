code complexity:

1-> +,-,*,/,if  -> 1 step
2-> loop,sub routine
3-> memory access 1 step

int sum=0;    --c0
for(int i=0;i<10;i++) ---n
sum=sum+i; -----c1

c0+n*c1
c0+c1n

big-o bad case->n

n time to execute


int sum=0;
for(i=0;i<n;i++)
for(j=0;j<i;j++)
sum=sum+i*j;

big-O-> n square


int sum=0;
for(i=0;i<n;i++)
for(j=0;j<i;j++)
sum=sum+i*j;
for(k=0;k<j;k++)
sum=sum-k;

big-o:n square


int sum=0;
for(i=0;i<n;i++)
{
if(sum==10)
sum=sum+i*j;
sum=sum+i;;
}

complexity is n:

for()
for()
for()   n power 4
for()


for(i=0;i<n;i++)
for(j=0;j<i;j++)

for(i,j=0;i<n,j<i;i++,j++)

 1 3 45 6 7 8 9
 
1-search= 0(n)
2-access= 0(1)
3-insert= 0(n)
4-delete= 0(n)


Arraylist:

get(0)
remove(1)
for(String st:ar)

delete and update:

linked list

read and add:

array list


linked list:

LinkedList<String> ls=new LinkedList<String>();
ls.add("hussina");
ls.add("jena");
ls.add("laya");
Iterator<String> itr=ls.iterator();
while(itr.hasNext())
{
sysout(itr.next());
}


hashmap():

key and value

HashMap<Key,value> hm=new HashMap<Key,value>();
hm.put(1,"sandy");
hm.put(1,"sandy");
hm.put(1,"sandy");
sysout(hm.get(1));
for(Map.Entry m: map.entrySet()){
sys("key"+m.getKey()+"value"+m.getValue());
}

update:

map.remove(1);

set:

Hashset:
->no duplicate

HashSet<String> ls=new HashSet<String>();
ls.add("hussina");
ls.add("jena");
ls.add("laya");
Iterator<String> itr=ls.iterator();
while(itr.hasNext())
{
sysout(itr.next());
}


tree set:
order and remove duplicate

stack:

Stack
stack.push
stack.pop


Arraylist<string> list = new ArrayLis<>();
list.add("jena");
list.add("Laya");
list.add("Hussien");

system.out.println(list);

Collections.sort(list);
}
}

public class sort(){
public static void main(String args[])
{

}


array of integer:
int[] numbers=new int[5];

studnet class:
public class student{
String name;
int age;
public student(String name,int age){
this.name=name;
this.age=age;
}

//array of objects

Student[] student=new Student[4];
student[0]= new student("hussein",27);
student[1]= new student("JENA",2);
student[2]= new student("WAEEL",33);

for(int i=0;i<student.lengths;i++)
{
s.o.p("name"+student[i].name+"age"+student[i].age);
}

for each:
for(Student student: students){
s.o.p("name"+ student.name+ "age" + student.age);
}
}


2d array:

if(row==column) 0,0 1,1 2,2
if(row>column)  1,0 2,0 2,1
if(row<column)  0,2 0,2 1,2

int[][] number= new int[3][3];
number[1][1]=5;

     dic
loop---->pool
     --->loop
     --->book

1->seach- O(n)
2->access-O(1)
3->insert-O(n)
3->delete-O(n)




